
//CALENDAR COMPONENT IMPLEMENTATION EXAMPLE

/*   import { StatusBar } from 'expo-status-bar';
  import React, { useState } from 'react';
  import {
    Keyboard,
    TouchableWithoutFeedback,
    View
  } from 'react-native';
  import { ThemeProvider } from 'styled-components';
  import { theme } from './src/themes/theme';
  
  import {
    Calendar,
    DayProps,
    MarkedDateProps
  } from './src/components/Elements/Calendar';
  import { format } from 'date-fns';
  import { getPlatformDate } from './src/components/Elements/Calendar/getPlatformDate';
  import { generateInterval } from './src/components/Elements/Calendar/generateInterval';
  
  interface RentalPeriod {
    startFormatted: string;
    endFormatted: string;
  }
  
  
  export default function App() {
  
    const [lastSelectedDate, setLastSelectedDate] = useState<DayProps>({} as DayProps)
    const [markedDates, setMarkedDates] = useState<MarkedDateProps>({} as MarkedDateProps)
    const [rentalPeriod, setRentalPeriod] = useState<RentalPeriod>({} as RentalPeriod)
  
    function handleChangeDate(date: DayProps) {
      let start = !lastSelectedDate.timestamp ? date : lastSelectedDate;
      let end = date;
  
      if (start.timestamp > end.timestamp) {
        start = end;
        end = start;
      }
  
      setLastSelectedDate(end);
      const interval = generateInterval(start, end);
      setMarkedDates(interval);
  
      const firstDate = Object.keys(interval)[0];
      const endDate = Object.keys(interval)[Object.keys(interval).length - 1];
  
      setRentalPeriod({
        startFormatted: format(getPlatformDate(new Date(firstDate)), 'dd/MM/yyyy'),
        endFormatted: format(getPlatformDate(new Date(endDate)), 'dd/MM/yyyy'),
      })
    }
  
    function formatFinalDataMessage() {
      if (!rentalPeriod.endFormatted || !rentalPeriod.startFormatted) {
        return ''
      }
      return [
        `De ${rentalPeriod.startFormatted}`,
        `At√© ${rentalPeriod.endFormatted}`]
    }
  
  
    return (
      <ThemeProvider theme={theme}>
        <StatusBar style="auto" />
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View>
            <Calendar
              onDayPress={handleChangeDate}
              markedDates={markedDates}
              initialDate={formatFinalDataMessage()[0]}
              finalDate={formatFinalDataMessage()[1]}
            />
          </View>
        </TouchableWithoutFeedback>
      </ThemeProvider>
    );
  }
   */
  
